// std and main are not available for bare metal software
// stm32f1xx examples
//https://github.com/stm32-rs/stm32f1xx-hal/tree/master/examples
// esp8266 tutorial
//https://circuitdigest.com/microcontroller-projects/interfacing-esp8266-with-stm32f103c8-stm32-to-create-a-webserver
#![no_std]
#![no_main]

use cortex_m_rt::entry;
// The runtime
use embedded_hal::digital::v2::OutputPin;
// the `set_high/low`function
use stm32f1xx_hal::{delay::Delay, pac, prelude::*};
// STM32F1 specific functions

#[allow(unused_imports)]
use panic_halt; // When a panic occurs, stop the microcontroller

// This marks the entrypoint of our application. The cortex_m_rt creates some
// startup code before this, but we don't need to worry about this
#[entry]
fn main() -> ! {
    // Get handles to the hardware objects. These functions can only be called
    // once, so that the borrowchecker can ensure you don't reconfigure
    // something by accident.
    let dp = pac::Peripherals::take().unwrap();
    let cp = cortex_m::Peripherals::take().unwrap();

    // GPIO pins on the STM32F1 must be driven by the APB2 peripheral clock.
    // This must be enabled first. The HAL provides some abstractions for
    // us: First get a handle to the RCC peripheral:
    let mut rcc = dp.RCC.constrain();
    // Now we have access to the RCC's registers. The GPIOC can be enabled in
    // RCC_APB2ENR (Prog. Ref. Manual 8.3.7), therefore we must pass this
    // register to the `split` function.
    let mut gpioa = dp.GPIOA.split(&mut rcc.apb2);
    let mut gpiob = dp.GPIOB.split(&mut rcc.apb2);
    let mut gpioc = dp.GPIOC.split(&mut rcc.apb2);

    // #############################################
    // This gives us an exclusive handle to the GPIOC peripheral. To get the
    // handle to a single pin, we need to configure the pin first. Pin C13
    // is usually connected to the Bluepills onboard LED.
    let mut led = gpioc.pc13.into_push_pull_output(&mut gpioc.crh);

    // Now we need a delay object. The delay is of course depending on the clock
    // frequency of the microcontroller, so we need to fix the frequency
    // first. The system frequency is set via the FLASH_ACR register, so we
    // need to get a handle to the FLASH peripheral first:
    let mut flash = dp.FLASH.constrain();
    // Now we can set the controllers frequency to 8 MHz:
    let clocks = rcc.cfgr.sysclk(8.mhz()).freeze(&mut flash.acr);
    // The `clocks` handle ensures that the clocks are now configured and gives
    // the `Delay::new` function access to the configured frequency. With
    // this information it can later calculate how many cycles it has to
    // wait. The function also consumes the System Timer peripheral, so that no
    // other function can access it. Otherwise the timer could be reset during a
    // delay.
    let mut delay = Delay::new(cp.SYST, clocks);

    // ################# PINS ######################
    // RW is alwas set to 0 to write data
    // H: DATA, L: Instruction code
    let mut rs_led = gpiob.pb11.into_push_pull_output(&mut gpiob.crh);//lcd pin4
    // Chip enable signal
    let mut e_led = gpiob.pb10.into_push_pull_output(&mut gpiob.crh); // lcd pin6
    // data bit 4 to 7
    let mut db4_led = gpiob.pb0.into_push_pull_output(&mut gpiob.crl);
    let mut db5_led = gpioa.pa7.into_push_pull_output(&mut gpioa.crl);
    let mut db6_led = gpioa.pa6.into_push_pull_output(&mut gpioa.crl);
    let mut db7_led = gpioa.pa5.into_push_pull_output(&mut gpioa.crl);

    // Init pins
    let rs = gpio::GPIO::new(pins.p12).output();
    let en = gpio::GPIO::new(pins.p11).output();
    let d4 = gpio::GPIO::new(pins.p5).output();
    let d5 = gpio::GPIO::new(pins.p4).output();
    let d6 = gpio::GPIO::new(pins.p3).output();
    let d7 = gpio::GPIO::new(pins.p2).output();

    // try wifi ================================
    let mut wifi_rtx = gpioa.pa2.into_push_pull_output(&mut gpioa.crl);
    let mut wifi_tx = gpioa.pa3.into_push_pull_output(&mut gpioa.crl);

    let mut module = Module::new(rx, tx, clock).expect("unable to create module");
    // Create a new access point.
    let mut session = JoinApConfig {
        ssid: &necessary_env_var("ESP8266_WIFI_SERIAL_SSID"),
        password: &necessary_env_var("ESP8266_WIFI_SERIAL_PASSWORD"),
    }
        .join(module)
        .expect("unable to start network sesstion");

    // Start listening for incoming connections on the specified port.
    session.listen(2048).unwrap();
    // Start an event loop.
    loop {
        let event = nb::block!(session.poll_network_event()).expect("unable to poll network event");
        // Some business logic.
    }
    // =====================================================

    // Now, enjoy the lightshow!
    // loop {
    //     led.toggle();
    //     // led on micro
    //     delay.delay_ms(1_000_u16);
    // }
}